// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(cuid())
  firstName       String   @map("first_name")
  lastName        String?  @map("last_name")
  username        String   @unique
  email           String   @unique
  password        String?
  profileImageURL String?  @default("https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg") @map("profile_image_url")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  followers  Follows[] @relation("follower")
  followings Follows[] @relation("following")

  tweets        Tweet[]
  likedTweets   TweetLike[]
  comments      Comment[]
  likedComments CommentLike[]

  bookmarks Bookmark[]

  sentNotifications     Notification[] @relation("sender")
  recievedNotifications Notification[] @relation("recipient")

  chats Chat[]
  chatMemberships ChatMembership[]
  initiatedChatActivities ChatActivity[] @relation("source-user")
  targetedChatActivities ChatActivity[] @relation("target-user")
  sentMessages Message[] @relation("sender")
}

// --------------------------------------------------------------------------

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String @map("follower_id")

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @map("following_id")

  @@id([followerId, followingId])
}

// --------------------------------------------------------------------------

model Tweet {
  id        String   @id @default(cuid())
  content   String?
  imageURL  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  tweetEngagement TweetEngagement?
}

// --------------------------------------------------------------------------

model TweetEngagement {
  likes    TweetLike[]
  comments Comment[]
  shares   Int         @default(0)
  bookmarks Bookmark[]

  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String @map("tweet_id")

  @@id([tweetId])
}

model TweetLike {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  tweetEngagement TweetEngagement @relation(fields: [tweetId], references: [tweetId])
  tweetId         String          @map("tweet_id")

  @@id([userId, tweetId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  tweetEngagement TweetEngagement @relation(fields: [tweetId], references: [tweetId])
  tweetId         String          @map("tweet_id")

  likes CommentLike[]

  parentComment      Comment?  @relation("parent-comments", fields: [parentCommentId], references: [id])
  parentCommentId    String?
  comments           Comment[] @relation("parent-comments")
  replies            Comment[] @relation("replied-to-comment")
  repliedTo          Comment?  @relation("replied-to-comment", fields: [repliedToCommentId], references: [id])
  repliedToCommentId String?   @map("replied_to_comment_id")
}

model CommentLike {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @map("comment_id")

  @@id([userId, commentId])
}

// ----------------------------------------------------------------------------------

enum NotificationType {
  LIKE_ON_TWEET
  COMMENT_ON_TWEET
  LIKE_ON_COMMENT
  REPLY_ON_COMMENT
  FOLLOW
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  senderId    String           @map("sender_id")
  recipientId String           @map("recipient_id")
  isSeen      Boolean          @default(false) @map("is_seen")
  createdAt   DateTime         @default(now()) @map("created_at")

  sender    User @relation("sender", fields: [senderId], references: [id])
  recipient User @relation("recipient", fields: [recipientId], references: [id])

  metaData Json?
}

// ----------------------------------------------------------------------------------

model Bookmark {
  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  tweetEngagement TweetEngagement @relation(fields: [tweetId], references: [tweetId])
  tweetId String @map("tweet_id")

  @@id([userId, tweetId])
}

// ----------------------------------------------------------------------------------

model Chat {
  id String @id @default(cuid())
  name String?
  isGroupChat Boolean @default(false) @map("is_group_chat")
  creatorId String @map("creator_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  creator User @relation(fields: [creatorId], references: [id])
  members ChatMembership[]
  activites ChatActivity[]
  messages Message[]
}

enum ChatMemberRole {
  ADMIN
  MEMBER
}

model ChatMembership {
  chatId String @map("chat_id")
  userId String @map("user_id")
  role ChatMemberRole @default(MEMBER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])
  
  @@id([chatId, userId])
}

enum ChatActivityType {
  MEMBER_ADDED
  MEMBER_REMOVED
  MADE_ADMIN
}

model ChatActivity {
  id String @id @default(cuid())
  type ChatActivityType
  chatId String @map("chat_id")
  userId String @map("user_id")
  targetUserId String @map("target_user_id")
  createdAt DateTime @default(now()) @map("created_at")

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation("source-user", fields: [userId], references: [id])
  targetUser User @relation("target-user",fields: [targetUserId], references: [id])
}

model Message {
  id String @id @default(cuid())
  senderId String @map("sender_id")
  content String
  chatId String @map("chat_id") 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sender User @relation("sender", fields: [senderId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])
}